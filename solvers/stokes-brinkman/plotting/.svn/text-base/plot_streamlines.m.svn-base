function plot_streamlines(G, Dofs, v1, v2, num, varargin)
% plot_streamlines -- Plots 2-D streamlines onto the current figure.
%
% SYNOPSIS:
%   plot_streamlines(G, Dofs, v1, v2, num)
%   plot_streamlines(G, Dofs, v1, v2, num, direction)
%
% PARAMETERS:
%
%   G      - Grid structure as generated by cartGrid.
%
%   Dofs   - Degrees-of-freedom structure as generated by 'findCartDofs'.
%
%   v1, v2 - Velocities in x- and y-direction in all 9 nodal points .
%
%   'pn'/pv - List of 'key'/value pairs defining optional parameters.  The
%             supported options are:
%               - 'direction' -- determines in which direction the starting
%                                points of the streamlines are
%                                distributed. Can be one of the following:
%                                - 'diagonal' 
%                                - 'horisontal' 
%                                - 'vertical' 
%                                - 'verticaledge'
%                                - 'crossdiagonal'
%                                - 'cross'
%                                - 'all'
%                                default value is 'vertical'.

  error(nargchk(5, 8, nargin, 'struct'));
  opt = struct('direction','vertical');
  opt = merge_options(opt, varargin{:});
  direction=opt.direction;

  dxi = find(G.cellFaces(:,2)==1);  dxj = find(G.cellFaces(:,2)==2);
  dyi = find(G.cellFaces(:,2)==3);  dyj = find(G.cellFaces(:,2)==4);
  dx  = G.faces.centroids(G.cellFaces(dxj,1),1)-...
        G.faces.centroids(G.cellFaces(dxi,1),1);
  dy  = G.faces.centroids(G.cellFaces(dyj,1),2)-...
        G.faces.centroids(G.cellFaces(dyi,1),2);
  dx  = dx(1); dy = dy(1);
  
  [vI vJ] = meshgrid(G.physDims(1)+dx/2:dx:G.physDims(2)-dx/2,...
                     G.physDims(3)+dy/2:dy:G.physDims(4)-dy/2);
  
  Nx = G.cartDims(1);   Ny = G.cartDims(2);
  vx = v1;              vy = v2;

  v_all = sqrt(vx.*vx+vy.*vy);

  integral = [1;4;1;4;16;4;1;4;1];
  vxs      = vx(Dofs.Vdofs)*integral/6/6; 
  vys      = vy(Dofs.Vdofs)*integral/6/6; 
  v        = v_all(Dofs.Vdofs)*integral/6/6; 

  pcolor(vI,vJ,reshape(log10(v),Nx,Ny)'); shading flat; colormap(jet); 
  axis equal tight; hold on;
  
  if strmatch('crossdiagonal', direction)
    disp('crossdiagonal');
    ii = [linspace(G.physDims(1),G.physDims(2),num)';...
          linspace(G.physDims(1),G.physDims(2),num)'];
    jj = [G.physDims(4)-linspace(G.physDims(3),G.physDims(4),num)';...
          linspace(G.physDims(1),G.physDims(2),num)'];
    
   elseif strmatch('diagonal', direction)
    disp('diagonal');
    ii = [linspace(G.physDims(1),G.physDims(2),num)'];
    jj = [G.physDims(4)-linspace(G.physDims(3),G.physDims(4),num)'];
    
  elseif strmatch('horisontal', direction)
    disp('horisontal');
    ii = [linspace(G.physDims(1),G.physDims(2),num)'];
    jj = [ones(num,1)*(G.physDims(4)-G.physDims(3))/3];
  
   elseif strmatch('verticaledge', direction)
    disp('verticaledge')
    ii = [ones(num,1)*dx; ...                           % vertical left
          ones(num,1)*(G.physDims(2)-dx);...            % vertical right
          ones(num,1)*(G.physDims(2)-G.physDims(1))/2]; % vertical middle
    jj = [linspace(G.physDims(3),G.physDims(4),num)';...
          linspace(G.physDims(3),G.physDims(4),num)';...
          linspace(G.physDims(3),G.physDims(4),num)'];
  
  elseif strmatch('vertical', direction)
    disp('vertical');
    ii = [ones(num,1)*(G.physDims(2)-G.physDims(1))/2];
    jj = [linspace(G.physDims(3),G.physDims(4),num)'];
    
  elseif strmatch('cross', direction)
    disp('cross');
    ii = [ones(num,1)*(G.physDims(2)-G.physDims(1))/2;...
          linspace(G.physDims(1),G.physDims(2),num)'];
    jj = [linspace(G.physDims(3),G.physDims(4),num)';...
          ones(num,1)*(G.physDims(4)-G.physDims(3))/2];
    
  elseif strmatch('all', direction)
    disp('all');
    ii = [ones(num,1)*(G.physDims(2)-G.physDims(1))/2;...  % vertical middle
          linspace(G.physDims(1),G.physDims(2),num)';...   % horisontal middle
          linspace(G.physDims(1),G.physDims(2),num)';...   % diagonal one way
          linspace(G.physDims(1),G.physDims(2),num)'];     % diagonal other way
    jj = [linspace(G.physDims(3),G.physDims(4),num)';...
          ones(num,1)*(G.physDims(4)-G.physDims(3))/2;...
          G.physDims(4)-linspace(G.physDims(3),G.physDims(4),num)';...
          linspace(G.physDims(1),G.physDims(2),num)'];
  end
  
  hlines = streamline(vI,vJ,reshape(vxs,Nx,Ny)',reshape(vys,Nx,Ny)',ii,jj);
  hlines = [hlines,streamline(vI,vJ,-reshape(vxs,Nx,Ny)',...
                              -reshape(vys,Nx,Ny)',ii,jj)];
set(hlines,'Color','k');
%   h = streamslice(vI,vJ,reshape(vxs,Nx,Ny)',reshape(vys,Nx,Ny)');
%    set(h, 'color', 'k');
%   daspect([1 1 1])
%   view(2);
%   
%   figure;
%   streamslice(vI,vJ,reshape(vxs,Nx,Ny)',reshape(vys,Nx,Ny)')
%   figure;
  hold off;
    
