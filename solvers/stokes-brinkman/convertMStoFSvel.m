function sol = convertMStoFSvel(sol, G, CG, Dofs, basis, actB)
% convertMStoFSvel -- Computes fine-scale velocities from multiscale velocities
%
% SYNOPSIS:
%   sol = convertMStoFSvel(sol, G, CG, Dofs, basis, actB)
% 
% PARAMETERS:
%   sol      - The coarse-scale (multiscale) solution.
%
%   G, CG    - Underlying grid (G, see 'grid_structure') and coarse grid
%              model (CG) defined by function 'generateCoarseGridSB'.
%
%   Dofs     - Structure of Degrees-of-freedom generated by 'findCartDofs'.
%
%   basis    - Structure with two or three fields: basisx, basisy (and
%              basisz) consisting of the basis functions for the
%              respective directions. Ex.: 
%              basis.basisx = CS.psi(1:Dofs.numHalfDofs,:);
%
%   fluid    - Fluid object as defined by function initSingleFluid.
%
%   actB     - List of active cell faces ('CS.activeCellFaces')
%
% RETURNS:
%   sol - Updated coarse-scale solution with new fields sol.v1, sol.v2
%         (and sol.v3) added.  
%
  
dim        = numel(G.cartDims);
length_vec = G.cells.num*size(Dofs.Vdofs,2)*size(Dofs.Pdofs,2);
i_vec      = zeros(length_vec,1);
j_vec      = zeros(length_vec,1);
basisx_vec = zeros(length_vec,1);
basisy_vec = zeros(length_vec,1);
if dim==3
  basisz_vec = zeros(length_vec,1);
end

no_vec = zeros(length_vec,1);
count  = 0;

for i = 1:size(sol.blockVel,1), 
  % For each coarse face i, find the half-dofs in block
  block        = CG.cellFaces(actB(i),1); 
  [cells,temp] = find(CG.cells.subCells(:,block)); 
  j_index      = unique(Dofs.HalfDofs(cells,:)); 
  for j = 1:size(Dofs.Vdofs,2)*size(cells,1)
    count        = count+1;
    ji           = j_index(j);
    % Convert from half-dofs --> vdofs
    j_vec(count) = Dofs.HalfDofsToVdofs(ji); 
    i_vec(count) = i; 

    % Add value of basis for half-dof j and face i to basis_vec
    basisx_vec(count) = basis.basisx(ji,i); 
    basisy_vec(count) = basis.basisy(ji,i);
    if dim==3
      basisz_vec(count) = basis.basisz(ji,i);
    end
    
    % Count how many contributions one node within a coarse block has from
    % one of the coarse half faces of the block (1 - 8 times)
    no_vec(count) = 1; 
  end
end

clear basis.basisx basis.basisy basis.basisz actB;

j_vec      = j_vec(1:count);
i_vec      = i_vec(1:count);
basisx_vec = basisx_vec(1:count);
basisy_vec = basisy_vec(1:count);
if dim==3
  basisz_vec = basisz_vec(1:count);
end
no_vec     = no_vec(1:count);

% Assemble matrix: rows == vdofs, columns == coarse half faces, 
% entries == how many contributions the vdof has from the coarse face.
sum_basis  = sparse(j_vec,i_vec,no_vec);
ind_basis  = find(sum_basis);

% Assemble matrix: rows == vdofs, columns == coarse half faces, 
% entries == sum of all basis functions for the vdof / the coarse face.
v_msx      = sparse(j_vec, i_vec, basisx_vec);
clear basisx_vec;
v_msy      = sparse(j_vec,i_vec,basisy_vec);
clear basisy_vec;
if dim==3
  v_msz    = sparse(j_vec,i_vec,basisz_vec);
  clear basisz_vec;
end

% Divide by number of contributions from the coarse half faces to the vdof 
% --> averages the contributions
v_msx(ind_basis) = v_msx(ind_basis)./sum_basis(ind_basis);
v_msy(ind_basis)=v_msy(ind_basis)./sum_basis(ind_basis);
if dim==3
  v_msz(ind_basis)=v_msz(ind_basis)./sum_basis(ind_basis);
end
clear i_vec j_vec ind_basis no_vec sum_basis;

% We are now left with a matrix which is adjusted for the fact that
% several half dofs equals one vdof 

% Multiply the vdofs by the coarse velocity from the respective coarse half face
for i = 1:length(sol.blockVel)
  v_msx(:,i) = v_msx(:,i).*sol.blockVel(i);
  v_msy(:,i) = v_msy(:,i).*sol.blockVel(i);
  if dim==3
    v_msz(:,i) = v_msz(:,i).*sol.blockVel(i);
  end
end

num_vdofs = 0;
vdofs_ind = zeros(Dofs.numVdofs,1);
for i = 1:CG.cells.num 
  cells = find(CG.cells.subCells(:,i)); 
  vdofs = unique(reshape(Dofs.Vdofs(cells,:)',[],1)); 
  
  vdofs_ind(num_vdofs+1:num_vdofs+length(vdofs)) = vdofs;
  
  num_vdofs = num_vdofs+length(vdofs);
end

% Assemble matrix: rows == vdofs, columns == 1, 
% entries == in how many blocks the vdof is represented
vdofs_block = sparse(vdofs_ind,1,ones(length(vdofs_ind),1));
clear vdofs_ind;

% Divide the value for the vdof by the number of times it is represented
v_msx = spdiags(1./vdofs_block,0,size(v_msx,1),size(v_msx,1))*v_msx;
v_msy = spdiags(1./vdofs_block,0,size(v_msy,1),size(v_msy,1))*v_msy;
if dim==3
  v_msz = spdiags(1./vdofs_block,0,size(v_msz,1),size(v_msz,1))*v_msz;
end
clear vdofs_block;

% Sum the velocities for each vdof
sol.v1 = sum(v_msx,2);
sol.v2 = sum(v_msy,2);
if dim==3
  sol.v3 = sum(v_msz,2);
end
