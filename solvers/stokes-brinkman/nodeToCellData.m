function sol = nodeToCellData(sol, G, Dofs, varargin)
% nodeToCellData -- Construct cell fluxes and pressures from nodal data 
% 
% SYNOPSIS:
%   sol = nodeToCellData(sol, G, Dofs)
%
% PARAMETERS:
%
%   sol  - A structure containing the velocities 'v1', 'v2' (and 'v3') and the
%          pressure 'p'
%
%   G    - Grid structure as generated by cartGrid(2d).
%
%   Dofs - Degrees of Freedom structure as generated by findCartDofs
%
%   'pn'/pv  - List of 'key'/value pairs defining optional parameters.  The
%              supported options are:
%                - part -- 
%                - CG -- the coarse grid structure in case of multiscale
%
% RETURNS:
%   sol - An updated structure also containing the cellface fluxes
%   'cellFlux' and the cell pressures 'cellPressure'.
 
  opt = struct('part', [], 'CG', []);
  opt = merge_options(opt, varargin{:});

  dim = numel(G.cartDims);

  dxi = find(G.cellFaces(:,2)==1);dxj=find(G.cellFaces(:,2)==2);
  dyi = find(G.cellFaces(:,2)==3);dyj=find(G.cellFaces(:,2)==4);
  dxc = G.faces.centroids(G.cellFaces(dxj,1),1)-...
        G.faces.centroids(G.cellFaces(dxi,1),1); 
  dyc = G.faces.centroids(G.cellFaces(dyj,1),2)-...
        G.faces.centroids(G.cellFaces(dyi,1),2); 
  dx  = rldecode(dxc', double(G.cells.numFaces), 2) .';
  dy  = rldecode(dyc', double(G.cells.numFaces), 2) .';

  if dim==2
    integral   = [1; 4; 1];

    cellFlux_1 = sol.v1(Dofs.cellFace2nodes)*integral.*dy/6;
    cellFlux_2 = sol.v2(Dofs.cellFace2nodes)*integral.*dx/6;

    sol.cellFlux=zeros(sum(G.cells.numFaces),1);
    sol.cellFlux(G.cellFaces(:,2)==1)=-cellFlux_1(G.cellFaces(:,2)==1);
    sol.cellFlux(G.cellFaces(:,2)==2)= cellFlux_1(G.cellFaces(:,2)==2);
    sol.cellFlux(G.cellFaces(:,2)==3)=-cellFlux_2(G.cellFaces(:,2)==3);
    sol.cellFlux(G.cellFaces(:,2)==4)= cellFlux_2(G.cellFaces(:,2)==4);

  elseif dim==3

    dzi = find(G.cellFaces(:,2)==5);dzj=find(G.cellFaces(:,2)==6);
    dzc = G.faces.centroids(G.cellFaces(dzj,1),3)-...
          G.faces.centroids(G.cellFaces(dzi,1),3); 
    dz  = rldecode(dzc', double(G.cells.numFaces), 2) .';
    
    integral=[1; 4; 1;...
              4;16; 4;...
              1; 4; 1];

    cellFlux_1=sol.v1(Dofs.cellFace2nodes)*integral.*dy.*dz/6/6;
    cellFlux_2=sol.v2(Dofs.cellFace2nodes)*integral.*dx.*dz/6/6;
    cellFlux_3=sol.v3(Dofs.cellFace2nodes)*integral.*dx.*dy/6/6;

    sol.cellFlux=zeros(sum(G.cells.numFaces),1);
    sol.cellFlux(G.cellFaces(:,2)==1)=-cellFlux_1(G.cellFaces(:,2)==1);
    sol.cellFlux(G.cellFaces(:,2)==2)= cellFlux_1(G.cellFaces(:,2)==2);
    sol.cellFlux(G.cellFaces(:,2)==3)=-cellFlux_2(G.cellFaces(:,2)==3);
    sol.cellFlux(G.cellFaces(:,2)==4)= cellFlux_2(G.cellFaces(:,2)==4);
    sol.cellFlux(G.cellFaces(:,2)==5)=-cellFlux_3(G.cellFaces(:,2)==5);
    sol.cellFlux(G.cellFaces(:,2)==6)= cellFlux_3(G.cellFaces(:,2)==6);
  
  end

  if size(Dofs.Pdofs,1)==1
    sol.cellPressure = mean(sol.p(Dofs.Pdofs)',2);
  else
    sol.cellPressure = mean(sol.p(Dofs.Pdofs),2);
  end
  if ~isempty(opt.part)
    sol.blockPressure = opt.CG.cells.subCells'*sol.cellPressure...
        ./sum(opt.CG.cells.subCells)';
    sol.cellPressure = sol.blockPressure(opt.part);
  end
  
  sol.faceFlux = cellFlux2faceFlux(G, sol.cellFlux);
  
  